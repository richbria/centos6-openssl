diff -up openssl-1.0.1i/ssl/ssl_ciph.c openssl-1.0.1i/ssl/ssl_ciph.c.fix_secure_gentenv
--- openssl-1.0.1i/ssl/ssl_ciph.c	2014-08-15 17:43:12.000000000 -0300
+++ openssl-1.0.1i/ssl/ssl_ciph.c.fix_secure_gentenv	2014-08-15 17:46:28.000000000 -0300
@@ -140,7 +140,7 @@
  * OTHERWISE.
  */
 
-/* for secure_getenv */
+/* for __secure_getenv */
 #define _GNU_SOURCE
 #include <stdio.h>
 #include <openssl/objects.h>
@@ -458,7 +458,7 @@ static void load_builtin_compressions(vo
 
 			MemCheck_off();
 			ssl_comp_methods=sk_SSL_COMP_new(sk_comp_cmp);
-			if (ssl_comp_methods != NULL && secure_getenv("OPENSSL_DEFAULT_ZLIB") != NULL)
+			if (ssl_comp_methods != NULL && __secure_getenv("OPENSSL_DEFAULT_ZLIB") != NULL)
 				{
 				comp=(SSL_COMP *)OPENSSL_malloc(sizeof(SSL_COMP));
 				if (comp != NULL)
diff -up openssl-1.0.1i/crypto/conf/conf_api.c openssl-1.0.1i/crypto/conf/conf_api.c.fix_secure_gentenv
--- openssl-1.0.1i/crypto/conf/conf_api.c	2014-08-15 17:43:12.000000000 -0300
+++ openssl-1.0.1i/crypto/conf/conf_api.c.fix_secure_gentenv	2014-08-15 17:46:28.000000000 -0300
@@ -63,7 +63,7 @@
 # define NDEBUG
 #endif
 
-/* for secure_getenv */
+/* for __secure_getenv */
 #define _GNU_SOURCE
 #include <assert.h>
 #include <stdlib.h>
@@ -144,7 +144,7 @@ char *_CONF_get_string(const CONF *conf,
 			if (v != NULL) return(v->value);
 			if (strcmp(section,"ENV") == 0)
 				{
-				p=secure_getenv(name);
+				p=__secure_getenv(name);
 				if (p != NULL) return(p);
 				}
 			}
@@ -157,7 +157,7 @@ char *_CONF_get_string(const CONF *conf,
 			return(NULL);
 		}
 	else
-		return (secure_getenv(name));
+		return (__secure_getenv(name));
 	}
 
 #if 0 /* There's no way to provide error checking with this function, so
diff -up openssl-1.0.1i/crypto/conf/conf_mod.c openssl-1.0.1i/crypto/conf/conf_mod.c.fix_secure_gentenv
--- openssl-1.0.1i/crypto/conf/conf_mod.c	2014-08-15 17:43:12.000000000 -0300
+++ openssl-1.0.1i/crypto/conf/conf_mod.c.fix_secure_gentenv	2014-08-15 17:46:28.000000000 -0300
@@ -56,7 +56,7 @@
  *
  */
 
-/* for secure_getenv */
+/* for __secure_getenv */
 #define _GNU_SOURCE
 #include <stdio.h>
 #include <ctype.h>
@@ -550,7 +550,7 @@ char *CONF_get1_default_config_file(void
 	char *file;
 	int len;
 
-	file = secure_getenv("OPENSSL_CONF");
+	file = __secure_getenv("OPENSSL_CONF");
 	if (file)
 		return BUF_strdup(file);
 
diff -up openssl-1.0.1i/crypto/x509/by_file.c openssl-1.0.1i/crypto/x509/by_file.c.fix_secure_gentenv
--- openssl-1.0.1i/crypto/x509/by_file.c	2014-08-15 17:43:12.000000000 -0300
+++ openssl-1.0.1i/crypto/x509/by_file.c.fix_secure_gentenv	2014-08-15 17:46:28.000000000 -0300
@@ -56,7 +56,7 @@
  * [including the GNU Public Licence.]
  */
 
-/* for secure_getenv */
+/* for __secure_getenv */
 #define _GNU_SOURCE
 #include <stdio.h>
 #include <time.h>
@@ -102,7 +102,7 @@ static int by_file_ctrl(X509_LOOKUP *ctx
 	case X509_L_FILE_LOAD:
 		if (argl == X509_FILETYPE_DEFAULT)
 			{
-			file = (char *)secure_getenv(X509_get_default_cert_file_env());
+			file = (char *)__secure_getenv(X509_get_default_cert_file_env());
 			if (file)
 				ok = (X509_load_cert_crl_file(ctx,file,
 					      X509_FILETYPE_PEM) != 0);
diff -up openssl-1.0.1i/crypto/x509/x509_vfy.c openssl-1.0.1i/crypto/x509/x509_vfy.c.fix_secure_gentenv
--- openssl-1.0.1i/crypto/x509/x509_vfy.c	2014-08-15 17:43:12.000000000 -0300
+++ openssl-1.0.1i/crypto/x509/x509_vfy.c.fix_secure_gentenv	2014-08-15 17:46:28.000000000 -0300
@@ -56,7 +56,7 @@
  * [including the GNU Public Licence.]
  */
 
-/* for secure_getenv */
+/* for __secure_getenv */
 #define _GNU_SOURCE
 #include <stdio.h>
 #include <time.h>
@@ -498,7 +498,7 @@ static int check_chain_extensions(X509_S
 			!!(ctx->param->flags & X509_V_FLAG_ALLOW_PROXY_CERTS);
 		/* A hack to keep people who don't want to modify their
 		   software happy */
-		if (secure_getenv("OPENSSL_ALLOW_PROXY_CERTS"))
+		if (__secure_getenv("OPENSSL_ALLOW_PROXY_CERTS"))
 			allow_proxy_certs = 1;
 		purpose = ctx->param->purpose;
 		}
diff -up openssl-1.0.1i/crypto/x509/by_dir.c openssl-1.0.1i/crypto/x509/by_dir.c.fix_secure_gentenv
--- openssl-1.0.1i/crypto/x509/by_dir.c	2014-08-15 17:43:12.000000000 -0300
+++ openssl-1.0.1i/crypto/x509/by_dir.c.fix_secure_gentenv	2014-08-15 17:46:28.000000000 -0300
@@ -56,7 +56,7 @@
  * [including the GNU Public Licence.]
  */
 
-/* for secure_getenv */
+/* for __secure_getenv */
 #define _GNU_SOURCE
 #include <stdio.h>
 #include <time.h>
@@ -137,7 +137,7 @@ static int dir_ctrl(X509_LOOKUP *ctx, in
 	case X509_L_ADD_DIR:
 		if (argl == X509_FILETYPE_DEFAULT)
 			{
-			dir=(char *)secure_getenv(X509_get_default_cert_dir_env());
+			dir=(char *)__secure_getenv(X509_get_default_cert_dir_env());
 			if (dir)
 				ret=add_cert_dir(ld,dir,X509_FILETYPE_PEM);
 			else
diff -up openssl-1.0.1i/crypto/o_init.c openssl-1.0.1i/crypto/o_init.c.fix_secure_gentenv
--- openssl-1.0.1i/crypto/o_init.c	2014-08-15 17:43:12.000000000 -0300
+++ openssl-1.0.1i/crypto/o_init.c.fix_secure_gentenv	2014-08-15 17:46:28.000000000 -0300
@@ -52,7 +52,7 @@
  *
  */
 
-/* for secure_getenv */
+/* for __secure_getenv */
 #define _GNU_SOURCE
 #include <e_os.h>
 #include <openssl/err.h>
@@ -76,7 +76,7 @@ static void init_fips_mode(void)
 	/* Ensure the selftests always run */
 	FIPS_mode_set(1);
 
-	if (secure_getenv("OPENSSL_FORCE_FIPS_MODE") != NULL)
+	if (__secure_getenv("OPENSSL_FORCE_FIPS_MODE") != NULL)
 		{
 		buf[0] = '1';
 		}
diff -up openssl-1.0.1i/crypto/rand/randfile.c openssl-1.0.1i/crypto/rand/randfile.c.fix_secure_gentenv
--- openssl-1.0.1i/crypto/rand/randfile.c	2014-08-15 17:43:12.000000000 -0300
+++ openssl-1.0.1i/crypto/rand/randfile.c.fix_secure_gentenv	2014-08-15 17:46:28.000000000 -0300
@@ -60,7 +60,7 @@
 #if !defined(OPENSSL_SYS_VXWORKS)
 #define _XOPEN_SOURCE 500
 #endif
-/* for secure_getenv */
+/* for __secure_getenv */
 #define _GNU_SOURCE
 
 #include <errno.h>
@@ -280,7 +280,7 @@ const char *RAND_file_name(char *buf, si
 	struct stat sb;
 #endif
 
-	s=secure_getenv("RANDFILE");
+	s=__secure_getenv("RANDFILE");
 	if (s != NULL && *s && strlen(s) + 1 < size)
 		{
 		if (BUF_strlcpy(buf,s,size) >= size)
@@ -288,7 +288,7 @@ const char *RAND_file_name(char *buf, si
 		}
 	else
 		{
-		s=secure_getenv("HOME");
+		s=__secure_getenv("HOME");
 #ifdef DEFAULT_HOME
 		if (s == NULL)
 			{
diff -up openssl-1.0.1i/crypto/engine/eng_list.c openssl-1.0.1i/crypto/engine/eng_list.c.fix_secure_gentenv
--- openssl-1.0.1i/crypto/engine/eng_list.c	2014-08-15 17:43:12.000000000 -0300
+++ openssl-1.0.1i/crypto/engine/eng_list.c.fix_secure_gentenv	2014-08-15 17:46:28.000000000 -0300
@@ -61,7 +61,7 @@
  * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
  */
 
-/* for secure_getenv */
+/* for __secure_getenv */
 #define _GNU_SOURCE
 #include "eng_int.h"
 
@@ -403,7 +403,7 @@ ENGINE *ENGINE_by_id(const char *id)
 #ifdef OPENSSL_SYS_VMS
 		if(OPENSSL_issetugid() || (load_dir = getenv("OPENSSL_ENGINES")) == 0) load_dir = "SSLROOT:[ENGINES]";
 #else
-		if((load_dir = secure_getenv("OPENSSL_ENGINES")) == 0) load_dir = ENGINESDIR;
+		if((load_dir = __secure_getenv("OPENSSL_ENGINES")) == 0) load_dir = ENGINESDIR;
 #endif
 		iterator = ENGINE_by_id("dynamic");
 		if(!iterator || !ENGINE_ctrl_cmd_string(iterator, "ID", id, 0) ||
diff -up openssl-1.0.1i/crypto/asn1/a_verify.c openssl-1.0.1i/crypto/asn1/a_verify.c.fix_secure_gentenv
--- openssl-1.0.1i/crypto/asn1/a_verify.c	2014-08-15 17:43:12.000000000 -0300
+++ openssl-1.0.1i/crypto/asn1/a_verify.c.fix_secure_gentenv	2014-08-15 17:46:28.000000000 -0300
@@ -56,7 +56,7 @@
  * [including the GNU Public Licence.]
  */
 
-/* for secure_getenv */
+/* for __secure_getenv */
 #define _GNU_SOURCE
 
 #include <stdio.h>
@@ -174,7 +174,7 @@ int ASN1_item_verify(const ASN1_ITEM *it
 			goto err;
 		ret = -1;
 		}
-	else if (mdnid == NID_md5 && secure_getenv("OPENSSL_ENABLE_MD5_VERIFY") == NULL)
+	else if (mdnid == NID_md5 && __secure_getenv("OPENSSL_ENABLE_MD5_VERIFY") == NULL)
 		{
 		ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM);
 		goto err;
diff -up openssl-1.0.1i/crypto/md5/md5_dgst.c openssl-1.0.1i/crypto/md5/md5_dgst.c.fix_secure_gentenv
--- openssl-1.0.1i/crypto/md5/md5_dgst.c	2014-08-15 17:43:12.000000000 -0300
+++ openssl-1.0.1i/crypto/md5/md5_dgst.c.fix_secure_gentenv	2014-08-15 17:46:28.000000000 -0300
@@ -56,7 +56,7 @@
  * [including the GNU Public Licence.]
  */
 
-/* for secure_getenv */
+/* for __secure_getenv */
 #define _GNU_SOURCE
 #include <stdio.h>
 #include "md5_locl.h"
@@ -76,7 +76,7 @@ const char MD5_version[]="MD5" OPENSSL_V
 int MD5_Init(MD5_CTX *c)
 #ifdef OPENSSL_FIPS
 	{
-	if (FIPS_mode() && secure_getenv("OPENSSL_FIPS_NON_APPROVED_MD5_ALLOW") == NULL)
+	if (FIPS_mode() && __secure_getenv("OPENSSL_FIPS_NON_APPROVED_MD5_ALLOW") == NULL)
 		OpenSSLDie(__FILE__, __LINE__, \
                 "Digest MD5 forbidden in FIPS mode!");
 	return private_MD5_Init(c);
diff -up openssl-1.0.1i/engines/ccgost/gost_ctl.c openssl-1.0.1i/engines/ccgost/gost_ctl.c.fix_secure_gentenv
--- openssl-1.0.1i/engines/ccgost/gost_ctl.c	2014-08-15 17:43:12.000000000 -0300
+++ openssl-1.0.1i/engines/ccgost/gost_ctl.c.fix_secure_gentenv	2014-08-15 17:46:28.000000000 -0300
@@ -6,7 +6,7 @@
  *        Implementation of control commands for GOST engine          *
  *            OpenSSL 0.9.9 libraries required                        *
  **********************************************************************/            
-/* for secure_getenv */
+/* for __secure_getenv */
 #define _GNU_SOURCE
 #include <stdlib.h>
 #include <string.h>
@@ -67,7 +67,7 @@ const char *get_gost_engine_param(int pa
 		{
 		return gost_params[param];
 		}
-	tmp = secure_getenv(gost_envnames[param]);
+	tmp = __secure_getenv(gost_envnames[param]);
 	if (tmp) 
 		{
 		if (gost_params[param]) OPENSSL_free(gost_params[param]);
@@ -81,7 +81,7 @@ int gost_set_default_param(int param, co
 	{
 	const char *tmp;
 	if (param <0 || param >GOST_PARAM_MAX) return 0;
-	tmp = secure_getenv(gost_envnames[param]);
+	tmp = __secure_getenv(gost_envnames[param]);
 	/* if there is value in the environment, use it, else -passed string * */
 	if (!tmp) tmp=value;
 	if (gost_params[param]) OPENSSL_free(gost_params[param]);
